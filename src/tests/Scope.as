package tests {		import tests.assets.ScopeTest;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class Scope extends TestSuite {			// Constants:			// Public Properties:		// the number of loops to run in every test:		public var loops:uint = 1000000;												// Protected Properties:				// set up some variables used in the test:		protected var instance:ScopeTest;;		protected static const cA:Number=10;		protected static const cB:Number=5;		protected static var sA:Number;		protected static var sB:Number;		protected var iA:Number;		protected var iB:Number;			// Initialization:		public function Scope() {			name = "Scope";			description = "Testing impact of variable scope. "+loops+" loops.";			tareTest = new MethodTest(tare);			initFunction = init;			iterations = 4;			tests = [				new MethodTest(local, null, "local", 0, 1, "local variables"),				new MethodTest(memberImplicit, null, "memberImplicit", 0, 1, "member variables"),				new MethodTest(memberExplicit, null, "memberExplicit", 0, 1, "member variables w/this"),				new MethodTest(staticVars, null, "staticVars", 0, 1, "static variables"),				new MethodTest(staticExplicit, null, "staticExplicit", 0, 1, "static variables explicit"),				new MethodTest(instanceVars, null, "instanceVars", 0, 1, "instance variables"),				new MethodTest(externalStatic, null, "externalStatic", 0, 1, "external static"),				new MethodTest(constants, null, "constants", 0, 1, "constants")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		protected function init():void {			instance = new ScopeTest();			ScopeTest.sA = instance.iA = iA = sA = cA;			ScopeTest.sB = instance.iB = iB = sB = cB;		}				// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = 50;			}		}			protected function local():void {			var lA:Number = cA;			var lB:Number = cB;			for (var i:uint=0; i<loops; i++) {				var c:Number = lA*lB+lA+lB/lA;			}		}				protected function memberImplicit():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = iA*iB+iA+iB/iA;			}		}				protected function memberExplicit():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = this.iA*this.iB+this.iA+this.iB/this.iA;			}		}				protected function staticVars():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = sA*sB+sA+sB/sA;			}		}				protected function staticExplicit():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = Scope.sA*Scope.sB+Scope.sA+Scope.sB/Scope.sA;			}		}				protected function instanceVars():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = instance.iA*instance.iB+instance.iA+instance.iB/instance.iA;			}		}				protected function externalStatic():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = ScopeTest.sA*ScopeTest.sB+ScopeTest.sA+ScopeTest.sB/ScopeTest.sA;			}		}				protected function constants():void {			for (var i:uint=0; i<loops; i++) {				var c:Number = cA*cB+cA+cB/cA;			}		}			}	}