package tests {		import flash.geom.Point;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class ConditionalPriority extends TestSuite {			// Constants:			// Public Properties:		public var loops:uint = 1000000;			// Protected Properties:		// set up some variables used in the test:		protected var alwaysFalse:Boolean = false;			// Initialization:		public function ConditionalPriority() {			name = "ConditionalPriority";			description = "Demonstrates performance benefit of prioritizing conditionals. "+loops+" loops.";			tareTest = new MethodTest(tare);			iterations = 4;			tests = [				new MethodTest(prioritized, null, "prioritized", 0, 1, "prioritized"),				new MethodTest(unprioritized, null, "unprioritized", 0, 1, "unprioritized")			];		}			// Public getter / setters:			// Public Methods:		// Protected Methods:		// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {			}		}				protected function prioritized():void {			for (var i:uint=0; i<loops; i++) {				if (alwaysFalse && expensiveTest(i)) {}			}		}				protected function unprioritized():void {			for (var i:uint=0; i<loops; i++) {				if (expensiveTest(i) && alwaysFalse) {}			}		}			protected function expensiveTest(val:Number):Boolean {			var a:Number = Math.cos(val)*Math.PI;			return false;		}					}	}