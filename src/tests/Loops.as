package tests {		import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class Loops extends TestSuite {			// Constants:			// Public Properties:		// sets the length of the vector to be used in all tests:		public var loops:uint = 1000000;												// Protected Properties:		// the vector to be used in all tests (so the construction cost isn't included in the test time):		protected var vec:Vector.<Boolean> = new Vector.<Boolean>(loops);			// Initialization:		public function Loops() {			name = "Loops";			description = "Comparing speed of different loop structures. "+loops+" loops.";			iterations = 4;			tests = [				new MethodTest(forIncrement, null, "forIncrement", 0, 1, "for increment"),				new MethodTest(forDecrement, null, "forDecrement", 0, 1, "for decrement"),				new MethodTest(whileIncrement, null, "whileIncrement", 0, 1, "while increment"),				new MethodTest(whileDecrement, null, "whileDecrement", 0, 1, "while decrement"),				new MethodTest(doWhileIncrement, null, "doWhileIncrement", 0, 1, "do while increment"),				new MethodTest(doWhileDecrement, null, "doWhileDecrement", 0, 1, "do while decrement"),				new MethodTest(forIn, null, "forIn", 0, 1, "for...in"),				new MethodTest(forEachIn, null, "forEachIn", 0, 1, "for each...in"),				new MethodTest(forEachInUntyped, null, "forEachInUntyped", 0, 1, "for each...in untyped"),				new MethodTest(forEachInPosttyped, null, "forEachInPosttyped", 0, 1, "for each...in posttyped"),				new MethodTest(vecForEach, null, "vecForEach", 0, 1, "Vector.forEach")			];		}					// Public getter / setters:			// Public Methods:		// Protected Methods:		protected function forIncrement():void {			for (var i:uint=0; i<loops; i++) {				var a:uint = i;			}		}				protected function forDecrement():void {			for (var i:uint=loops; i>0; i--) {				var a:uint = i-1;			}		}				protected function whileIncrement():void {			var i:uint = 0;			while (i < loops) {				var a:uint = i;				i++;			}		}				protected function whileDecrement():void {			var i:uint = loops;			while (--i) {				var a:uint = i;			}		}				protected function doWhileIncrement():void {			var i:uint = 0;			do {				var a:uint = i;			} while (++i < loops);		}				protected function doWhileDecrement():void {			var i:uint = loops-1;			do {				var a:uint = i;			} while (i--);		}				protected function forIn():void {			for (var b:* in vec) {				var a:uint = b;			}		}				protected function forEachIn():void {			for each (var b:Boolean in vec) {				var a:uint = loops;			}		}				protected function forEachInUntyped():void {			for each (var b:* in vec) {				var a:uint = loops;			}		}				protected function forEachInPosttyped():void {			for each (var b:* in vec) {				var c:Boolean = b as Boolean;				var a:uint = loops;			}		}				protected function vecForEach():void {			vec.forEach(vecForEachF);		}			// helper functions:		protected function vecForEachF(item:Boolean, index:int, vec:Vector.<Boolean>):void {			var a:uint = index;		}	}	}