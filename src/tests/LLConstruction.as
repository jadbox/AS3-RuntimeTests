package tests {		import tests.assets.LLNode;	import tests.assets.LLNodeVO;	import tests.assets.LLNodeFinal;	import tests.assets.LLNodeFinalVO;	import flash.geom.Point;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class LLConstruction extends TestSuite {			// Constants:			// Public Properties:		// the number of elements in each collection:		public var loops:uint = 100000;			// Protected Properties:		// set up some variables used in the test:			// Initialization:		public function LLConstruction() {			name = "LLConstruction";			description = "Comparing construction/population cost of linked lists & Vectors. "+loops+" loops.";			tareTest = new MethodTest(tare);			iterations = 4;			tests = [				new MethodTest(vector, null, "vector", 0, 1, "vector"),				new MethodTest(vectorFixed, null, "vectorFixed", 0, 1, "vector fixed"),				new MethodTest(internalNode, null, "internalNode", 0, 1, "internal node"),				new MethodTest(node, null, "node", 0, 1, "node"),				new MethodTest(nodeVO, null, "nodeVO", 0, 1, "VO node"),				new MethodTest(nodeFinal, null, "nodeFinal", 0, 1, "node Final"),				new MethodTest(nodeFinalVO, null, "nodeFinalVO", 0, 1, "VO node Final")			];		}				// Public getter / setters:			// Public Methods:			// Protected Methods:		// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		public function tare():void {			for (var i:uint=0; i<loops; i++) {				var a:Point = new Point(i,i*2);			}		}				public function vector():void {			var list:Vector.<Point> = new Vector.<Point>();			for (var i:uint=0; i<loops; i++) {				list[i] = new Point(i,i*2);			}		}				public function vectorFixed():void {			var list:Vector.<Point> = new Vector.<Point>(loops);			for (var i:uint=0; i<loops; i++) {				list[i] = new Point(i,i*2);			}		}				public function internalNode():void {			var o:Node = new Node(null,null,new Point(0,0));			for (var i:uint=0; i<loops; i++) {				var oo:Node = o;				o = new Node(null,o,new Point(i,i*2));				oo.next = o;			}		}				public function node():void {			var o:LLNode = new LLNode(null,null,new Point(0,0));			for (var i:uint=0; i<loops; i++) {				var oo:LLNode = o;				o = new LLNode(null,o,new Point(i,i*2));				oo.next = o;			}		}				public function nodeFinal():void {			var o:LLNodeFinal = new LLNodeFinal(null,null,new Point(0,0));			for (var i:uint=0; i<loops; i++) {				var oo:LLNodeFinal = o;				o = new LLNodeFinal(null,o,new Point(i,i*2));				oo.next = o;			}		}				public function nodeVO():void {			var o:LLNodeVO = new LLNodeVO(null,null,0,0);			for (var i:uint=0; i<loops; i++) {				var oo:LLNodeVO = o;				o = new LLNodeVO(null,o,i,i*2);				oo.next = o;			}		}				public function nodeFinalVO():void {			var o:LLNodeFinalVO = new LLNodeFinalVO(null,null,0,0);			for (var i:uint=0; i<loops; i++) {				var oo:LLNodeFinalVO = o;				o = new LLNodeFinalVO(null,o,i,i*2);				oo.next = o;			}		}				}	}import flash.geom.Point;class Node {		public var value:Point;	public var next:Node;	public var prev:Node;		public function Node(next:Node,prev:Node,value:Point) {		this.next = next;		this.prev = prev;		this.value = value;	}	}