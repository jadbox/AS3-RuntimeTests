package tests {		import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class Collections extends TestSuite {			// Constants:			// Public Properties:		public var loops:uint = 1000000;			// Protected Properties:			// Initialization:		public function Collections() {			name = "Collections";			description = "Comparing cost of constructing and populating different collection types. "+loops+" loops.";			tareTest = new MethodTest(tare);			iterations = 4;			tests = [				new MethodTest(array, null, "array", 0, 1, "array"),				new MethodTest(arrayFixed, null, "arrayFixed", 0, 1, "array, fixed"),				new MethodTest(vector, null, "vector", 0, 1, "vector"),				new MethodTest(vectorFixed, null, "vectorFixed", 0, 1, "vector, fixed"),				new MethodTest(linkedList, null, "linkedList", 0, 1, "linked list")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {}		}				protected function array():void {			var list:Array = [];			for (var i:uint=0; i<loops; i++) {				list[i] = i/3;			}		}				protected function arrayFixed():void {			var list:Array = new Array(loops);			for (var i:uint=0; i<loops; i++) {				list[i] = i/3;			}		}				protected function vector():void {			var list:Vector.<Number> = new Vector.<Number>();			for (var i:uint=0; i<loops; i++) {				list[i] = i/3;			}		}				protected function vectorFixed():void {			var list:Vector.<Number> = new Vector.<Number>(loops);			for (var i:uint=0; i<loops; i++) {				list[i] = i/3;			}		}				protected function linkedList():void {			var o:LinkedList;			for (var i:uint=0; i<loops; i++) {				o = new LinkedList(i/3,o);			}		}				}	}class LinkedList {		public var next:LinkedList;	public var value:Number;		public function LinkedList(value:Number,next:LinkedList) {		this.value = value;		this.next = next;	}	}