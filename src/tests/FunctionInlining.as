package tests {		import flash.geom.Point;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class FunctionInlining extends TestSuite {			// Constants:			// Public Properties:		// the number of elements in each collection:		public var loops:uint = 1000000;			// Protected Properties:			// Initialization:		public function FunctionInlining() {			name = "FunctionInlining";			description = "Demonstration of performance impact of function calls in loops. "+loops+" loops.";			tareTest = new MethodTest(tare);			iterations = 4;			tests = [				new MethodTest(callFunction, null, "callFunction", 0, 1, "call function"),				new MethodTest(inline, null, "inline", 0, 1, "inlined"),				new MethodTest(inlineOptimized, null, "inlineOptimized", 0, 1, "optimized inline")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:			// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {			}		}				protected function callFunction():void {			var c:Number=0;			for (var i:uint=0; i<loops; i++) {				c = sum(i,c);			}		}				protected function inline():void {			var c:Number = 0;			for (var i:uint=0; i<loops; i++) {				// assume we would have to carry out the same number of operations:				// versus just c += i;				var a:Number = i;				var b:Number = c;				c = a+b;			}		}				protected function inlineOptimized():void {			var c:Number = 0;			for (var i:uint=0; i<loops; i++) {				c += i;			}		}		// helper methods:		protected function sum(a:Number,b:Number):Number {			return a+b;		}			}	}