package tests {		import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;	import flash.utils.Dictionary;		public class CollectionIteration extends TestSuite {			// Constants:			// Public Properties:		// the number of elements in each collection:		public var loops:uint = 100000;			// Protected Properties:				// set up some variables used in the test:		var arr:Array;		var vec:Vector.<Number>;		var ll:LinkedList;		var dic:Dictionary;		var hash1:Object;		var hash2:Object;			// Initialization:		public function CollectionIteration() {			name = "CollectionIteration";			description = "Iterating different collection types. "+loops+" loops.";			tareTest = new MethodTest(tare);			initFunction = init;			iterations = 4;			tests = [				new MethodTest(array, null, "Array"),				new MethodTest(vector, null, "Vector"),				new MethodTest(linkedList, null, "linked list"),				new MethodTest(dictionary, null, "Dictionary"),				new MethodTest(objHash2, null, "Object w/uint keys"),			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		protected function init():void {			arr = [];			for (var i:uint=0; i<loops; i++) {				arr[i] = i/3;			}						vec = new Vector.<Number>(loops);			for (i=0; i<loops; i++) {				vec[i] = i/3;			}						for (i=0; i<loops; i++) {				ll = new LinkedList(i/3,ll);			}						dic = new Dictionary();			for (i=0; i<loops; i++) {				dic[{}] = i/3;			}						hash1 = {};			for (i=0; i<loops; i++) {				var s:String = "1"+i;				hash1[s] = i/3;			}						hash2 = {};			for (i=0; i<loops; i++) {				s = "0"+i; // also: +"000", and +"00000000"				hash2[s] = i/3;			}		}			// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		public function tare():void {			for (var i:uint=0; i<loops; i++) {				var a:Number = i+0.2;			}		}				public function array():void {			for (var i:uint=0; i<loops; i++) {				arr[i] += 0.2;			}		}				public function vector():void {			for (var i:uint=0; i<loops; i++) {				vec[i] += 0.2;			}		}				public function linkedList():void {			var o:LinkedList = ll;			do {				o.value += 0.2;			} while (o = o.next);		}				public function dictionary():void {			for (var o:Object in dic) {				dic[o] += 0.2;			}		}				public function objHash1():void {			for (var n:String in hash1) {				hash1[n] += 0.2;			}		}			public function objHash2():void {			for (var n:String in hash2) {				hash2[n] += 0.2;			}		}			}	}final class LinkedList {		public var next:LinkedList;	public var value:Number;		public function LinkedList(value:Number,next:LinkedList) {		this.value = value;		this.next = next;	}	}