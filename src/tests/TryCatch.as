package tests {		import flash.geom.Point;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class TryCatch extends TestSuite {			// Constants:			// Public Properties:		// the number of elements in each collection:		public var loops:uint = 10000;			// Protected Properties:				// set up some variables used in the test:			// Initialization:		public function TryCatch() {			name = "TryCatch";			description = "Demonstrates impact of errors and try/catch. "+loops+" loops.";			tareTest = new MethodTest(tare);			iterations = 4;			tests = [				new MethodTest(tryCatchError, null, "tryCatchError", 0, 1, "try/catch w/Error"),				new MethodTest(tryCatchNoError, null, "tryCatchNoError", 0, 1, "try/catch w/o Error"),				new MethodTest(ifNull, null, "ifNull", 0, 1, "null check")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			var isNull:Object = null;			var isNotNull:Object = {};			for (var i:uint=0; i<loops; i++) {			}		}				protected function tryCatchError():void {			var isNull:Object = null;			var isNotNull:Object = {};			for (var i:uint=0; i<loops; i++) {				try { isNull.x = 3; } catch (e:Error) {}			}		}				protected function tryCatchNoError():void {			var isNull:Object = null;			var isNotNull:Object = {};			for (var i:uint=0; i<loops; i++) {				try { isNotNull.x = 3; } catch (e:Error) {}			}		}				protected function ifNull():void {			var isNull:Object = null;			var isNotNull:Object = {};			for (var i:uint=0; i<loops; i++) {				if (isNotNull) { isNotNull.x = 3; }			}		}				}	}