package tests {		import tests.assets.FunctionScopeTest;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class FunctionScope extends TestSuite {			// Constants:			// Public Properties:		// the number of loops to run in every test:		public var loops:uint = 100000;												// Protected Properties:		// set up some variables used in the test:		protected var instance:FunctionScopeTest;		protected var anonymousRefF:Function;		protected var refF:Function;			// Initialization:		public function FunctionScope() {			name = "FunctionScope";			description = "Tests the impact of function scope on access & execution time. "+loops+" loops.";			tareTest = new MethodTest(tare);			initFunction = init;			iterations = 4;			tests = [				new MethodTest(anonymous, null, "anonymous", 0, 1, "anonymous function"),				new MethodTest(anonymousRef, null, "anonymousRef", 0, 1, "reference to anonymous"),				new MethodTest(reference, null, "reference", 0, 1, "reference (CO)"),				new MethodTest(method, null, "method", 0, 1, "internal method"),				new MethodTest(external, null, "external", 0, 1, "external method"),				new MethodTest(staticTest, null, "staticTest", 0, 1, "static"),				new MethodTest(externalStatic, null, "externalStatic", 0, 1, "external static"),				new MethodTest(local, null, "local", 0, 1, "local function")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		protected function init():void {			instance = new FunctionScopeTest();			anonymousRefF = function(value:uint) {				return value*2;			}			refF = instanceTest;		}						// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = i*2;			}		}						protected function anonymous():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = (function(value:uint) { return value*2; })(i);			}		}				protected function anonymousRef():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = anonymousRefF(i);			}		}				protected function reference():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = refF(i);			}		}				protected function method():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = instanceTest(i);			}		}				protected function external():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = instance.instanceTest(i);			}		}			protected function staticTest():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = staticF(i);			}		}			protected function externalStatic():void {			for (var i:uint=0; i<loops; i++) {				var c:uint = FunctionScopeTest.staticTest(i);			}		}				protected function local():void {			function localTest(value:uint):uint {				return value*2;			}			for (var i:uint=0; i<loops; i++) {				var c:uint = localTest(i);			}		}							// helper methods:		protected function instanceTest(value:uint):uint {			return value*2;		}				public static function staticF(value:uint):uint {			return value*2;		}			}	}