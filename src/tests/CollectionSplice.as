package tests {		import flash.utils.Dictionary;	import com.gskinner.performance.TestSuite;	import com.gskinner.performance.MethodTest;		public class CollectionSplice extends TestSuite {			// Constants:			// Public Properties:		public var loops:uint = 100000;			// Protected Properties:		protected var removeCount:uint = loops/10|0;				// set up some variables used in the test:		protected var arr:Array;		protected var vec:Vector.<Number>;		protected var ll:LinkedList;		protected var dic:Dictionary;		protected var obj:Object;			// Initialization:		public function CollectionSplice() {			name = "CollectionSplice";			description = "Comparing cost of removing "+removeCount+" items from a collection of "+loops+".";			tareTest = new MethodTest(tare);			initFunction = init;			iterations = 4;			tests = [				new MethodTest(array, null, "array", 0, 1, "array"),				new MethodTest(vector, null, "vector", 0, 1, "vector"),				new MethodTest(linkedList, null, "linkedList", 0, 1, "linked list"),				new MethodTest(dictionary, null, "dictionary", 0, 1, "dictionary"),				new MethodTest(hash, null, "hash", 0, 1, "hash/object")			];		}			// Public getter / setters:			// Public Methods:			// Protected Methods:		protected function init():void {			arr = [];			for (var i:uint=0; i<loops; i++) {				arr[i] = i/3;			}						vec = new Vector.<Number>();			for (i=0; i<loops; i++) {				vec[i] = i/3;			}						var o:LinkedList;			var old:LinkedList;			for (i=0; i<loops; i++) {				old = o;				o = new LinkedList(i/3,old);				if (old) { old.next = o; }				if (i == loops>>1) { ll = o; }			}						dic = new Dictionary();			for (i=0; i<loops; i++) {				dic[i] = true;			}						obj = {};			for (i=0; i<loops; i++) {				obj["_"+i] = true;			}		}			// tare method that will be run to calculate the base time required to run the loop		// so it can be subtracted from the other test results.		protected function tare():void {			for (var i:uint=0; i<loops; i++) {							}		}				protected function array():void {			for (var i:uint=0; i<removeCount; i++) {				arr.splice(i,1);			}		}				protected function vector():void {			for (var i:uint=0; i<removeCount; i++) {				vec.splice(i,1);			}		}				protected function linkedList():void {			var o:LinkedList = ll;			for (var i:uint=0; i<removeCount; i++) {				o.prev.next = o.next;				o.next.prev = o.prev;				o = o.next;			}		}				protected function dictionary():void {			for (var i:uint=0; i<removeCount; i++) {				delete(dictionary[i]);			}		}				protected function hash():void {			for (var i:uint=0; i<removeCount; i++) {				delete(hash["_"+i]);			}		}			}	}class LinkedList {		public var prev:LinkedList;	public var next:LinkedList;	public var value:Number;		public function LinkedList(value:Number,prev:LinkedList) {		this.value = value;		this.prev = prev;	}}